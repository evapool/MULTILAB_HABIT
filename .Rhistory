anova_stats(fit$`ID`)
eta_sq(fit, partial = TRUE, ci.lvl = .9)
highAff.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# Stress affective -1 SD people low on affectiv stress have effect of overtraining
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
# Stress Affective +1 SD people high on affective stress have effect of overtraining
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML3, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
# Bayes factors
lowAff.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
lowAff.BF <- recompute(lowAnx.BF, iterations = 50000)
lowAff.BF[1]
highAff.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
highAff.BF <- recompute(highAff.BF, iterations = 50000)
highAff.BF[1]
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with varimax rotation
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "varimax", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
s = factor.scores (Q_EFA.means, quest.1.efa) #
axes <- s$scores
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
inter.whole = lmer(normPressFreq~ group*cue*prepost*(ML1+ML2+ML3+ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
inter.whole = lmer(normPressFreq~ group*cue*prepost*(ML1+ML2+ML3+ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
inter.anxiety = lmer(normPressFreq~ group*cue*prepost*ANXIETY + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
anova(inter.anxiety)
summary(inter.anxiety)
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# quick look at the covarivance structure
r.subscale = cor(Q_EFA.means, use = "pairwise.complete.obs")
cor.plot(Q_EFA.means,numbers=TRUE,main="correlation matrix")
names(Q_EFA.means)[names(Q_EFA.means) == 'V1'] <- 'STAI'
# check distributions before proceeding with FA
describe (Q_EFA.means)
pairs.panels(na.omit(Q_EFA.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with oblimin
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
# save the plot in the figures folder
dev.print(pdf, file.path(figures_path,'Figure_EFA_oblimin.pdf'))
dev.off()
# calculate the factors loadings
s = factor.scores (Q_EFA.means, quest.1.efa) #
CHANGE$ANXIETY_z <- scale(CHANGE$ANXIETY)
inter.anxiety = lmer(normPressFreq~ group*cue*prepost*ANXIETY_z + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
anova(inter.anxiety)
CHANGE$ANX_pSD <- scale(CHANGE$ANXIETY_z, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*ANX_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
anova(sslop.pSD)
CHANGE$ANX_mSD <- scale(CHANGE$ANXIETY_z, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*ANX_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
anova(sslop.mSD)
CHANGE$TICS_WORY_z <- scale(CHANGE$TICS_WORY)
inter.wory = lmer(normPressFreq~ group*cue*prepost*TICS_WORY_z + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE)
anova(inter.wory)
CHANGE$WORY_pSD <- scale(CHANGE$TICS_WORY_z, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*WORY_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE)
anova(sslop.pSD)
# WORRIES +1 SD people high in axiety/stress have effect of overtraining
CHANGE$WORY_mSD <- scale(CHANGE$TICS_WORY_z, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*WORY_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE)
anova(sslop.mSD)
# this tests the model predictions as we do in lmer but does not allow to display distributions
ANX.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$ANXIETY), FUN='mean', na.rm = T) # extract means
colnames(ANX.means) <- c('ID','group','site','ANXIETY', 'normChangeBehav')
# create median splits
ANX.means$AnxietySplit <- factor(ntile(ANX.means$ANXIETY, 2))
plyr::count(ANX.means$ID)
# this tests the model predictions as we do in lmer but does not allow to display distributions
WORY.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$TICS_WORY), FUN='mean', na.rm = T) # extract means
colnames(WORY.means) <- c('ID','group','site','TICS_WORY', 'normChangeBehav')
# create median splits
WORY.means$WorriesSplit <- factor(ntile(WORY.means$TICS_WORY, 2))
plyr::count(WORY.means$ID)
# low anxiety affect
lowWory.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(WORY.means, WorriesSplit == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
# low anxiety affect
lowWory.stat
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with varimax rotation
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "varimax", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
# save the plot in the figures folder
dev.print(pdf, file.path(figures_path,'Figure_EFA_varimax.pdf'))
dev.off()
# calculate the factors loadings
s = factor.scores (Q_EFA.means, quest.1.efa) #
s = factor.scores (Q_EFA.means, quest.1.efa)
s
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*AFF_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
anova(sslop.pSD)
summary(sslop.pSD)
Confint(sslop.mSD, level = 0.95)
ummary(sslop.mSD)
summary(sslop.mSD)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*AFF_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(sslop.pSD)
summary(sslop.pSD)
Confint(sslop.pSD, level = 0.95)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML3, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*AFF_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(sslop.mSD)
# this tests the model predictions as we do in lmer but does not allow to display distributions
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
# low stress affect
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAff.stat
fit <- (aov(normChangeBehav  ~ group + site + Error(ID), data= subset(AFF.means, StressAffect == '1'))
)
summary(fit)
lowAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
lowAnx.BF <- recompute(lowAnx.BF, iterations = 50000)
lowAnx.BF[1]
highAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
highAnx.stat
fit <- (aov(normChangeBehav  ~ group + site + Error(ID), data= subset(AFF.means, StressAffect == '2')))
summary(fit)
highAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
highAnx.BF <- recompute(highAnx.BF, iterations = 50000)
highAnx.BF[1]
CHANGE$ANXIETY_z <- scale(CHANGE$ANXIETY)
inter.anxiety = lmer(normPressFreq~ group*cue*prepost*ANXIETY_z + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.anxiety)
CHANGE$ANX_pSD <- scale(CHANGE$ANXIETY_z, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*ANX_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(sslop.pSD)
Confint(sslop.pSD, level = 0.95)
summary(sslop.pSD)
CHANGE$ANX_mSD <- scale(CHANGE$ANXIETY_z, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*ANX_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(sslop.mSD)
Confint(sslop.mSD, level = 0.95)
# this tests the model predictions as we do in lmer but does not allow to display distributions
ANX.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$ANXIETY), FUN='mean', na.rm = T) # extract means
colnames(ANX.means) <- c('ID','group','site','ANXIETY', 'normChangeBehav')
# create median splits
ANX.means$AnxietySplit <- factor(ntile(ANX.means$ANXIETY, 2))
plyr::count(ANX.means$ID)
lowAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(ANX.means, AnxietySplit == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAnx.stat
fit <- (aov(normChangeBehav  ~ group + site + Error(ID), data = subset(ANX.means, AnxietySplit == '1')))
eta_sq(fit, partial = TRUE, ci.lvl = .9)
highAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(ANX.means, AnxietySplit == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
highAnx.stat
fit <- (aov(normChangeBehav  ~ group + site + Error(ID), data = subset(ANX.means, AnxietySplit == '2')))
eta_sq(fit, partial = TRUE, ci.lvl = .9)
CHANGE$TICS_WORY_z <- scale(CHANGE$TICS_WORY)
inter.wory = lmer(normPressFreq~ group*cue*prepost*TICS_WORY_z + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE)
summary(inter.wory)
CHANGE$TICS_WORY_z <- scale(CHANGE$TICS_WORY)
inter.wory = lmer(normPressFreq~ group*cue*prepost*TICS_WORY_z + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(inter.wory)
Confint(inter.wory , level = 0.95)
CHANGE$WORY_pSD <- scale(CHANGE$TICS_WORY_z, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*WORY_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE)
summary(sslop.pSD)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*WORY_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(sslop.pSD)
Confint(sslop.pSD, level = 0.95)
CHANGE$WORY_mSD <- scale(CHANGE$TICS_WORY_z, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*WORY_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(sslop.mSD)
Confint(sslop.mSD, level = 0.95)
# this tests the model predictions as we do in lmer but does not allow to display distributions
WORY.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$TICS_WORY), FUN='mean', na.rm = T) # extract means
colnames(WORY.means) <- c('ID','group','site','TICS_WORY', 'normChangeBehav')
# create median splits
WORY.means$WorriesSplit <- factor(ntile(WORY.means$TICS_WORY, 2))
plyr::count(WORY.means$ID)
lowWory.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(WORY.means, WorriesSplit == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowWory.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(WORY.means, WorriesSplit == '1'),
whichRandom = "ID", iterations = 50000)
lowWory.BF <- recompute(lowWory.BF, iterations = 50000)
lowWory.BF[1]
library(effectsize)
snack.c1.stat
snack.c1.stat <- aov_car(outcomeliking ~ group*prepost + Error (ID/prepost), data = subset(SNACK.index, site == 'Caltech1'), anova_table = list(correction = "GG", es = "pes"))
SNACK.means <- aggregate(CHANGE$outcomeliking, by = list(CHANGE$ID, CHANGE$prepost, CHANGE$cue, CHANGE$group, CHANGE$site), FUN='mean') # extract means
colnames(SNACK.means) <- c('ID','prepost','cue','group', 'site','outcomeliking')
SNACK.index <- ddply(SNACK.means, .(ID, prepost), transform, outcomeliking  = outcomeliking-outcomeliking[cue=="Devalued"])
SNACK.index <- subset(SNACK.index, cue!='Devalued')
snack.c1.stat <- aov_car(outcomeliking ~ group*prepost + Error (ID/prepost), data = subset(SNACK.index, site == 'Caltech1'), anova_table = list(correction = "GG", es = "pes"))
snack.c1.stat
F_to_eta2(f = 173.84, df = 60, df_error = 1)
snack.c1.stat
snack.c1.stat
F_to_eta2(f = c(0.19, 173.84, 0.53), df = c(60, 60, 60), df_error = c(1,1,1))
fit <- (aov(outcomeliking ~ group*prepost + Error(ID/prepost), data= subset(SNACK.index, site == 'Caltech1')))
anova_stats(fit$`ID:prepost`)
eta_sq(fit, partial = TRUE, ci.lvl = .9)
F_to_eta2_adj(f = c(0.19, 173.84, 0.53), df = c(60, 60, 60), df_error = c(1,1,1))
F_to_eta2(f = c(0.19, 173.84, 0.53), df = c(60, 60, 60), df_error = c(1,1,1))
snack.c1.stat
F_to_eta2(f = c(0.19, 173.84, 0.53), df = c(1, 1, 1), df_error = c(60,60,60))
snack.c1.sta
snack.c1.stat
snack.c1.stat[1]
snack.c1.stat[2]
snack.c1.stat[3]
F_to_eta2(f = c(0.19, 173.84, 0.53), df = c(1, 1, 1), df_error = c(60,60,60))
eta_sq(fit, partial = TRUE, ci.lvl = .9)
F_to_eta2(f = c( 173.84), df = c(1), df_error = c(60))
F_to_eta2(f = c( 173.84), df = c(1), df_error = c(60))
snack.c2.stat <- aov_car(outcomeliking ~ group*prepost + Error (ID/prepost), data = subset(SNACK.index, site == 'Caltech2'), anova_table = list(correction = "GG", es = "pes"))
snack.c2.stat
fit <- (aov(outcomeliking ~ group*prepost + Error(ID/prepost), data= subset(SNACK.index, site == 'Caltech2')))
anova_stats(fit$`ID:prepost`)
eta_sq(fit, partial = TRUE, ci.lvl = .9)
snack.c2.stat
hunger.c1.stat
HUNGER.means <- aggregate(CHANGE$hunger, by = list(CHANGE$ID, CHANGE$group, CHANGE$prepost,CHANGE$site), FUN='mean') # extract means
colnames(HUNGER.means) <- c('ID','group','prepost','site','hunger')
HUNGER.means = subset(HUNGER.means, !ID == "115") # the recording of the  hunger rating  for this participant was done on the wrong scale
hunger.c1.stat <- aov_car(hunger ~ group*prepost + Error (ID/prepost), data = subset(HUNGER.means, site == 'Caltech1'), anova_table = list(correction = "GG", es = "pes"))
hunger.c1.stat
F_to_eta2(f = c(197.80), df = c(1), df_error = c(60))
hunger.c2.stat <- aov_car(hunger ~ group*prepost + Error (ID/prepost), data = subset(HUNGER.means, site == 'Caltech2'), anova_table = list(correction = "GG", es = "pes"))
hunger.c2.stat
F_to_eta2(f = c(92.40), df = c(1), df_error = c(57))
hunger.h.stat
hunger.h.stat <- aov_car(hunger ~ group*prepost + Error (ID/prepost), data = subset(HUNGER.means, site == 'Hamburg'), anova_table = list(correction = "GG", es = "pes"))
hunger.h.stat
F_to_eta2(f = c(230.55), df = c(1), df_error = c(62))
hunger.s.stat <- aov_car(hunger ~ group*prepost + Error (ID/prepost), data = subset(HUNGER.means, site == 'Sydney'), anova_table = list(correction = "GG", es = "pes"))
hunger.s.stat
F_to_eta2(f = c(309.26), df = c(1), df_error = c(58))
hunger.t.stat
hunger.t.stat
hunger.t.stat <- aov_car(hunger ~ group*prepost + Error (ID/prepost), data = subset(HUNGER.means, site == 'Tel_Aviv'), anova_table = list(correction = "GG", es = "pes"))
hunger.t.stat
F_to_eta2(f = c(236.92), df = c(1), df_error = c(58))
F_to_eta2(f = c( 173.84), df = c(1), df_error = c(60))
snack.c2.stat <- aov_car(outcomeliking ~ group*prepost + Error (ID/prepost), data = subset(SNACK.index, site == 'Caltech2'), anova_table = list(correction = "GG", es = "pes"))
snack.c2.stat
F_to_eta2(f = c(51.07), df = c(1), df_error = c(57))
snack.h.stat <- aov_car(outcomeliking ~ group*prepost + Error (ID/prepost), data = subset(SNACK.index, site == 'Hamburg'), anova_table = list(correction = "GG", es = "pes"))
snack.h.stat
F_to_eta2(f = c(92.38), df = c(1), df_error = c(63))
snack.s.stat <- aov_car(outcomeliking ~ group*prepost + Error (ID/prepost), data = subset(SNACK.index, site == 'Sydney'), anova_table = list(correction = "GG", es = "pes"))
snack.s.stat
snack.s.stat
F_to_eta2(f = c(87.72), df = c(1), df_error = c(58))
snack.t.stat <- aov_car(outcomeliking ~ group*prepost + Error (ID/prepost), data = subset(SNACK.index, site == 'Tel_Aviv'), anova_table = list(correction = "GG", es = "pes"))
snack.t.stat
F_to_eta2(f = c(44.46), df = c(1), df_error = c(58))
int.c1.stat <- aov_car(pressFreq ~ group*cue + Error (ID/cue), data = CALTECH.index, anova_table = list(correction = "GG", es = "pes"))
int.c1.stat
# get database
C.CALTECH = subset(CHANGE, site == 'Caltech1')
CALTECH.index <- getChangeIndex(C.CALTECH)# aggregate based on pre-post
# stat
int.c1.stat <- aov_car(pressFreq ~ group*cue + Error (ID/cue), data = CALTECH.index, anova_table = list(correction = "GG", es = "pes"))
int.c1.stat
F_to_eta2(f = c(0.73), df = c(1), df_error = c(60))
#database
C.CALTECH = subset(CHANGE, site == 'Caltech2')
CALTECH2.index <- getChangeIndex(C.CALTECH)# aggregate based on pre-post
# stat
int.c2.stat <- aov_car(pressFreq ~ group*cue + Error (ID/cue), data = CALTECH2.index, anova_table = list(correction = "GG", es = "pes"))
int.c2.stat
F_to_eta2(f = c(1.41), df = c(1), df_error = c(57))
C.HAMBURG = subset(CHANGE, site == 'Hamburg')
HAMBURG.index <- getChangeIndex(C.HAMBURG)# aggregate based on pre-post
# stat
int.h.stat <- aov_car(pressFreq ~ group*cue + Error (ID/cue), data = HAMBURG.index, anova_table = list(correction = "GG", es = "pes"))
int.h.stat
F_to_eta2(f = c(0.91), df = c(1), df_error = c(63))
C.SYDNEY = subset(CHANGE, site == 'Sydney')
SYDNEY.index <- getChangeIndex(C.SYDNEY)# aggregate based on pre-post
# stat
int.s.stat <- aov_car(pressFreq ~ group*cue + Error (ID/cue), data = SYDNEY.index, anova_table = list(correction = "GG", es = "pes"))
int.s.stat
F_to_eta2(f = c(0.19), df = c(1), df_error = c(58))
# get database
C.TELAVIV = subset(CHANGE, site == 'Tel_Aviv')
TELAVIV.index <- getChangeIndex(C.TELAVIV)# aggregate based on pre-post
# stat
int.t.stat
int.t.stat
C.TELAVIV = subset(CHANGE, site == 'Tel_Aviv')
TELAVIV.index <- getChangeIndex(C.TELAVIV)# aggregate based on pre-post
# stat
int.t.stat <- aov_car(pressFreq ~ group*cue + Error (ID/cue), data = TELAVIV.index, anova_table = list(correction = "GG", es = "pes"))
int.t.stat
F_to_eta2(f = c(0.42), df = c(1), df_error = c(58))
#------------------------ DATA REDUCTION  ----------------------------------
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# quick look at the covarivance structure
r.subscale = cor(Q_EFA.means, use = "pairwise.complete.obs")
cor.plot(Q_EFA.means,numbers=TRUE,main="correlation matrix")
names(Q_EFA.means)[names(Q_EFA.means) == 'V1'] <- 'STAI'
# check distributions before proceeding with FA
describe (Q_EFA.means)
pairs.panels(na.omit(Q_EFA.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with oblimin
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
# save the plot in the figures folder
dev.print(pdf, file.path(figures_path,'Figure_EFA_oblimin.pdf'))
dev.off()
s = factor.scores (Q_EFA.means, quest.1.efa)
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# run full model for each factor individually
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML3, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAff.stat
F_to_eta2(f = c(3.98), df = c(1), df_error = c(95))
highAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
highAff.stat
F_to_eta2(f = c(0.35), df = c(1), df_error = c(94))
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with varimax rotation
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "varimax", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
fa.diagram(quest.1.efa)
s = factor.scores (Q_EFA.means, quest.1.efa)
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# run full model for each factor simoutanously
inter.whole = lmer(normPressFreq~ group*cue*prepost*(ML1+ML2+ML3+ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.whole)
Confint(inter.whole, level = 0.95)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML3, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAff.stat
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# this tests the model predictions as we do in lmer but does not allow to display distributions
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAff.stat
prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with varimax rotation
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "varimax", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
fa.diagram(quest.1.efa)
s = factor.scores (Q_EFA.means, quest.1.efa) #
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML3, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
# low stress affect
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAff.stat
F_to_eta2(f = c(4.84), df = c(1), df_error = c(95))
highAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
highAnx.stat
F_to_eta2(f = c(0.34), df = c(1), df_error = c(94))
CHANGE$ANXIETY_z <- scale(CHANGE$ANXIETY)
CHANGE$TICS_WORY_z <- scale(CHANGE$TICS_WORY)
# this tests the model predictions as we do in lmer but does not allow to display distributions
ANX.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$ANXIETY), FUN='mean', na.rm = T) # extract means
colnames(ANX.means) <- c('ID','group','site','ANXIETY', 'normChangeBehav')
# create median splits
ANX.means$AnxietySplit <- factor(ntile(ANX.means$ANXIETY, 2))
plyr::count(ANX.means$ID)
lowAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(ANX.means, AnxietySplit == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAnx.stat
F_to_eta2(f = c(6.19), df = c(1), df_error = c(100))
lowAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(ANX.means, AnxietySplit == '1'),
whichRandom = "ID", iterations = 50000)
lowAnx.BF <- recompute(lowAnx.BF, iterations = 50000)
lowAnx.BF[1]
highAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(ANX.means, AnxietySplit == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
#
highAnx.stat
F_to_eta2(f = c(0.19), df = c(1), df_error = c(99))
WORY.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$TICS_WORY), FUN='mean', na.rm = T) # extract means
colnames(WORY.means) <- c('ID','group','site','TICS_WORY', 'normChangeBehav')
# create median splits
WORY.means$WorriesSplit <- factor(ntile(WORY.means$TICS_WORY, 2))
plyr::count(WORY.means$ID)
lowWory.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(WORY.means, WorriesSplit == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowWory.stat
F_to_eta2(f = c(5.18), df = c(1), df_error = c(99))
highWory.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(WORY.means, WorriesSplit  == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
#
highWory.stat
