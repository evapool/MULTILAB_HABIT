RPE <- CORR
RPE$SPE_in_RPE_VMPF <- NULL
RPE$SPE_in_RPE_VS <- NULL
RPE$SPE_in_RPE_VTA <- NULL
RPE$SPE_in_SPE_SFG <- NULL
RPE$SPE_in_SPE_VTA  <- NULL
RPE$SPE_in_SPE_left_MFG <- NULL
RPE$SPE_in_SPE_left_OFC <- NULL
RPE$SPE_in_SPE_right_MFG <- NULL
RPE$SPE_in_SPE_right_OFC <- NULL
RPE$RPE_in_SPE_SFG <- NULL
RPE$RPE_in_SPE_VTA <- NULL
RPE$RPE_in_SPE_left_MFG <- NULL
RPE$RPE_in_SPE_left_OFC <- NULL
RPE$RPE_in_SPE_right_MFG <- NULL
RPE$RPE_in_SPE_right_OFC <- NULL
cor(RPE, use = "pairwise.complete.obs")
cor.plot(RPE,numbers=TRUE,main="correlation matrix")
SPE <- CORR
SPE$SPE_in_RPE_VMPF <- NULL
SPE$SPE_in_RPE_VS <- NULL
SPE$SPE_in_RPE_VTA <- NULL
SPE$RPE_in_SPE_SFG <- NULL
SPE$RPE_in_SPE_VTA <- NULL
SPE$RPE_in_SPE_left_OFC <- NULL
SPE$RPE_in_SPE_right_MFG <- NULL
SPE$RPE_in_SPE_right_OFC <- NULL
SPE$RPE_in_RPE_VS  <- NULL
SPE$RPE_in_RPE_VTA <- NULL
SPE$RPE_in_RPE_VMPF <- NULL
cor(SPE, use = "pairwise.complete.obs")
cor.plot(SPE,numbers=TRUE,main="correlation matrix")
15*2*2
Anova(lm(RPE_in_RPE_VMPF ~ CS_pupil*ANT_DW_congr, data = DB.RE), type = 3)
tmp = join(tp.pupil, tp.dw, type = 'full')
tmp2 = join (tmp, tp.RT, type = 'full')
DB.RE = join (tmp2, ROI, type = 'full')
DB.RE = na.omit(DB.RE)
Anova(lm(RPE_in_RPE_VMPF ~ CS_pupil*ANT_DW_congr, data = DB.RE), type = 3)
Anova(lm(SPE_in_SPE_left_OFC ~ pupil_idx*dw_idx, data = DB.RE), type = 3)
Anova(lm(SPE_in_SPE_right_OFC ~ pupil_idx*dw_idx, data = DB.RE), type = 3)
Anova(lm(SPE_in_SPE_VTA ~ pupil_idx*dw_idx, data = DB.RE), type = 3)
Anova(lm(RPE_in_RPE_VTA ~ pupil_idx*dw_idx, data = DB.RE), type = 3)
Anova(lm(SPE_in_SPE_left_MFG ~ CS_pupil, data = DB.RE), type = 3)
Anova(lm(RPE_in_RPE_VMPF ~ CS_pupil, data = DB.RE), type = 3)
Anova(lm(VALEU_in_RPE_VMPF ~ CS_pupil, data = DB.RE), type = 3)
Anova(lm(VALUE_in_RPE_VMPF ~ CS_pupil, data = DB.RE), type = 3)
113*100/87
84*100/50
50*100/84
84+50
100*84/134
100*50/134
62.68657 - 37.31343
113*100%87
113*100/87
84*100/40
84*100/50
50*100%84
50*100/84
100*84/50
100*34/50
100*45/90
100*35/87
100*87/113
100*(113-87)/113
113/4
113-87
68+63
(0.43+0.82+0.33+0.66+0.16+0.34+0.51+0.38)/8
(0.30+0.17+0.42+0.28+0.58+0.18+0.32+0.22)/8
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'PicciRimerli2')
updateR()
updateR('PicciRimerli2')
updateR(admin_password = 'Admin user password')
updateR(admin_password = 'PicciRimerli2')
updateR()
R.version
4'712.75/2
)
)
''
# Set path
full_path       <- dirname(rstudioapi::getActiveDocumentContext()$path)
pos             <- regexpr("MULTILAB_HABIT", full_path)
home_path       <- substr(full_path, 1, pos+13)
figures_path    <- file.path(home_path,'ANALYSIS', 'figures')
utilities_path  <- file.path(home_path,'ANALYSIS','R')
setwd (home_path)
# source my utilites
source (file.path(utilities_path, 'getChangeIndex.R'))
source (file.path(utilities_path, 'getClassicIndex.R'))
source (file.path(utilities_path, 'makeIndividualDiffPlot.R'))
source (file.path(utilities_path, 'makeSplitGroupPlot.R'))
source (file.path(utilities_path, 'countTrialxCondition.R'))
# get database
FULL <- read.delim(file.path(home_path,'DATA/FULL_DATABASE.txt'), header = T, sep ='') # read in dataset
# define factors
FULL$site      <- factor(FULL$site)
FULL$ID        <- factor(FULL$ID)
FULL$session   <- factor(FULL$session)
FULL$run       <- factor(FULL$run)
FULL$trial     <- factor(FULL$trial)
FULL$cue       <- factor(FULL$cue)
FULL$prepost   <- factor(FULL$prepost)
FULL$group     <- factor(FULL$group)
# remove the baseline condition from the data
FULL <- subset(FULL, cue == 'Valued' | cue == 'Devalued')
# get the last run of the last training session and all the runs after satiation
DAY1   <- subset(FULL, group == '1-day')
DAY3   <- subset(FULL, group == '3-day')
DAY1 <- ddply(DAY1, .(ID), transform, averagePress  = mean(pressFreq[prepost=="pre"]))
DAY3 <- ddply(DAY3, .(ID), transform, averagePress  = mean(pressFreq[prepost=="pre"]))
C.DAY1 <- subset(DAY1, run == '2' | run == '3')
DAY3   <- subset(DAY3, session == '3') # we want the last day only
C.DAY3 <- subset(DAY3, run == '4' | run == '5')
CHANGE <- rbind(C.DAY1,C.DAY3)
# get variable of interest
CHANGE <- ddply(CHANGE, .(ID), transform, normChangeBehav  = (mean(normPressFreq[prepost=="post" & cue=='Valued']) - mean(normPressFreq[prepost=="pre" & cue=='Valued'])) - (mean(normPressFreq[prepost=="post" & cue=='Devalued']) - mean(normPressFreq[prepost=="pre" & cue=='Devalued'])))
CHANGE <- ddply(CHANGE, .(ID), transform, normChangeLiking = (mean(normLiking[prepost=="post" & cue=='Valued']) - mean(normLiking[prepost=="pre" & cue=='Valued'])) - (mean(normLiking[prepost=="post" & cue=='Devalued']) - mean(normLiking[prepost=="pre" & cue=='Devalued'])))
# code itemxcondition
CHANGE <- ddply(CHANGE, .(ID,prepost), countTrialxCondition)
# get total number of participants included
count(CHANGE$ID) # note that Caltech2 used a slightly different protocol so there are less repeat per condition
# subset by site
C.CALTECH = subset(CHANGE, site == 'Caltech1')
C.CALTECH2= subset(CHANGE, site == 'Caltech2')
C.HAMBURG = subset(CHANGE, site == 'Hamburg')
C.SYDNEY  = subset(CHANGE, site == 'Sydney')
C.TELAVIV = subset(CHANGE, site == 'Tel_Aviv')
library(car)
library(doBy)
library(afex)
library(lme4)
library(lmerTest)
library(ggplot2)
library(BayesFactor)
library(sjstats)
library(jtools)
library(plyr)
library(dplyr)
library(tidyr)
library(metafor)
library(rmcorr)
library(flexmix)
library(psych)
library(emmeans)
# Set path
full_path       <- dirname(rstudioapi::getActiveDocumentContext()$path)
pos             <- regexpr("MULTILAB_HABIT", full_path)
home_path       <- substr(full_path, 1, pos+13)
figures_path    <- file.path(home_path,'ANALYSIS', 'figures')
utilities_path  <- file.path(home_path,'ANALYSIS','R')
setwd (home_path)
# source my utilites
source (file.path(utilities_path, 'getChangeIndex.R'))
source (file.path(utilities_path, 'getClassicIndex.R'))
source (file.path(utilities_path, 'makeIndividualDiffPlot.R'))
source (file.path(utilities_path, 'makeSplitGroupPlot.R'))
source (file.path(utilities_path, 'countTrialxCondition.R'))
# get database
FULL <- read.delim(file.path(home_path,'DATA/FULL_DATABASE.txt'), header = T, sep ='') # read in dataset
# define factors
FULL$site      <- factor(FULL$site)
FULL$ID        <- factor(FULL$ID)
FULL$session   <- factor(FULL$session)
FULL$run       <- factor(FULL$run)
FULL$trial     <- factor(FULL$trial)
FULL$cue       <- factor(FULL$cue)
FULL$prepost   <- factor(FULL$prepost)
FULL$group     <- factor(FULL$group)
# remove the baseline condition from the data
FULL <- subset(FULL, cue == 'Valued' | cue == 'Devalued')
# get the last run of the last training session and all the runs after satiation
DAY1   <- subset(FULL, group == '1-day')
DAY3   <- subset(FULL, group == '3-day')
DAY1 <- ddply(DAY1, .(ID), transform, averagePress  = mean(pressFreq[prepost=="pre"]))
DAY3 <- ddply(DAY3, .(ID), transform, averagePress  = mean(pressFreq[prepost=="pre"]))
C.DAY1 <- subset(DAY1, run == '2' | run == '3')
DAY3   <- subset(DAY3, session == '3') # we want the last day only
C.DAY3 <- subset(DAY3, run == '4' | run == '5')
CHANGE <- rbind(C.DAY1,C.DAY3)
# get variable of interest
CHANGE <- ddply(CHANGE, .(ID), transform, normChangeBehav  = (mean(normPressFreq[prepost=="post" & cue=='Valued']) - mean(normPressFreq[prepost=="pre" & cue=='Valued'])) - (mean(normPressFreq[prepost=="post" & cue=='Devalued']) - mean(normPressFreq[prepost=="pre" & cue=='Devalued'])))
CHANGE <- ddply(CHANGE, .(ID), transform, normChangeLiking = (mean(normLiking[prepost=="post" & cue=='Valued']) - mean(normLiking[prepost=="pre" & cue=='Valued'])) - (mean(normLiking[prepost=="post" & cue=='Devalued']) - mean(normLiking[prepost=="pre" & cue=='Devalued'])))
# code itemxcondition
CHANGE <- ddply(CHANGE, .(ID,prepost), countTrialxCondition)
# get total number of participants included
count(CHANGE$ID) # note that Caltech2 used a slightly different protocol so there are less repeat per condition
# subset by site
C.CALTECH = subset(CHANGE, site == 'Caltech1')
C.CALTECH2= subset(CHANGE, site == 'Caltech2')
C.HAMBURG = subset(CHANGE, site == 'Hamburg')
C.SYDNEY  = subset(CHANGE, site == 'Sydney')
C.TELAVIV = subset(CHANGE, site == 'Tel_Aviv')
# Check if questionnaire data are correlated between them to exclude the possibility to simply enter
# them in the
questionnaires <- aggregate(ANXIETY ~   BIS_total* TICS_CSSS,
data = CHANGE, FUN = mean, na.action = na.pass)
r.questionnaires = cor(questionnaires, use = "pairwise.complete.obs")
# prepare database for the FA
Q_ACP.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_ACP.means <- Q_ACP.means.ID
Q_ACP.means$ID <- NULL
# quick look at the covarivance structure
r.subscale = cor(Q_ACP.means, use = "pairwise.complete.obs")
cor.plot(Q_ACP.means,numbers=TRUE,main="correlation matrix")
names(Q_ACP.means)[names(Q_ACP.means) == 'V1'] <- 'STAI'
# check distributions before proceeding with FA
describe (Q_ACP.means)
pairs.panels(na.omit(Q_ACP.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_ACP.means, fm = "ml")
# apply PCA with varimax rotation
# quest.1.pca <- psych::principal(Q_ACP.means, rotate="varimax", nfactors=4, scores=TRUE) # "none", "varimax" (Default), "quatimax", "promax", "oblimin", "simplimax", and "cluster"
quest.1.efa <- fa(r = Q_ACP.means, nfactors = 4, rotate = "varimax", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
# save the plot in the figures folder
dev.print(pdf, file.path(figures_path,'S_Figure_PCA.pdf'))
dev.off()
# calculate the factors loadings
# s = factor.scores (Q_ACP.means, quest.1.efa, method= "Bartlett") # is a good alternative but I could not find enough litterature
s = factor.scores (Q_ACP.means, quest.1.efa) #
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_ACP.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# run full model
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML1+ML2+ML3+ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
summary(change.inter)
Confint(change.inter, level = 0.95)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML3) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML1) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML2) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML3) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
s = factor.scores (Q_ACP.means, quest.1.efa, method= "Bartlett")
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_ACP.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# run full model
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML1+ML2+ML3+ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML3) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
quest.1.efa <- fa(r = Q_ACP.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
fa.diagram(quest.1.efa)
s = factor.scores (Q_ACP.means, quest.1.efa) #
#------------------------ USE FACTOR AS AS MODERATOR IN THE MAIN ANALYSIS ----------
# merge with the FULL database
axes <- s$scores
dat <- cbind(Q_ACP.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML3) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML3) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML2) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML3) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML1) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*(ML3) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
0.05/4
# Stress affective -1 SD people low in axiety/stress have effect of overtraining
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*AFF_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(sslop.pSD)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML3, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*AFF_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(sslop.mSD)
# this tests the model predictions as we do in lmer but does not allow to display distributions
AFF.means <- aggregate(PCA_CHANGE$normChangeBehav, by = list(PCA_CHANGE$ID, PCA_CHANGE$group, PCA_CHANGE$site, PCA_CHANGE$AFF_pSD, PCA_CHANGE$AFF_mSD, PCA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# ADJUSTED MEANS in case we want see the estimations from the model
acqC1.aov      <- aov_car(normChangeBehav  ~ group*AFF +Error(ID), data = AFF.means, observed = c("AFF"), factorize = F, anova_table = list(es = "pes"))
acqC1.adjmeans <- emmeans(acqC1.aov, specs = c("group"), by = "AFF", at = list(AFF= c(-1, 1)))
acqC1.adjmeans
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
# low stress affect
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
observed = c("AFF"), factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAff.stat
fit <- (aov(normChangeBehav  ~ group + site + Error(ID), data= subset(AFF.means, StressAffect == '1')))
anova_stats(fit$`ID`)
eta_sq(fit, partial = TRUE, ci.lvl = .9)
lowAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
lowAnx.BF <- recompute(lowAnx.BF, iterations = 50000)
lowAnx.BF[1]
AFF.means$StressAffect    <- dplyr::recode(AFF.means$StressAffect, "1" = "Lower Stress Affect", "2" = "Higher Stress Affect" )
AFF.means$group           <- dplyr::recode(AFF.means$group, "1-day" = "Moderate", "3-day" = "Extensive" )
ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_point(alpha = .5, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
geom_boxplot(alpha=0.3, outlier.alpha = 0) + # do not display outlyers or they will overlap with individual datapoint
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
# Check if questionnaire data are correlated between them to exclude the possibility to simply enter
# them in the
questionnaires <- aggregate(ANXIETY ~   BIS_total* TICS_CSSS,
data = CHANGE, FUN = mean, na.action = na.pass)
r.questionnaires = cor(questionnaires, use = "pairwise.complete.obs")
# prepare database for the FA
Q_ACP.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_ACP.means <- Q_ACP.means.ID
Q_ACP.means$ID <- NULL
# quick look at the covarivance structure
r.subscale = cor(Q_ACP.means, use = "pairwise.complete.obs")
cor.plot(Q_ACP.means,numbers=TRUE,main="correlation matrix")
names(Q_ACP.means)[names(Q_ACP.means) == 'V1'] <- 'STAI'
# check distributions before proceeding with FA
describe (Q_ACP.means)
pairs.panels(na.omit(Q_ACP.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_ACP.means, fm = "ml")
# apply PCA with varimax rotation
quest.1.efa <- fa(r = Q_ACP.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
fa.diagram(quest.1.efa)
s = factor.scores (Q_ACP.means, quest.1.efa)
s
axes <- s$scores
dat <- cbind(Q_ACP.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
change.inter = lmer(normPressFreq~ group*cue*prepost*ML1 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
plot(fitted(change.inter),residuals(change.inter))
plot(fitted(change.inter),residuals(change.inter))
qqnorm(residuals(change.inter))
hist(residuals(change.inter))
change.inter = lmer(normPressFreq~ group*cue*prepost*ML1 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*ML1 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*ML2 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*ML3 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
change.inter = lmer(normPressFreq~ group*cue*prepost*ML4 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(change.inter)
summary(change.inter)
inter.social = lmer(normPressFreq~ group*cue*prepost*ML2 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.social)
summary(inter.social)
s = factor.scores (Q_ACP.means, quest.1.efa)
s
r.questionnaires
s = factor.scores (Q_ACP.means, quest.1.efa)
s$scores
print(quest.1.efa$loadings,cutoff = 0.0)
inter.affect = lmer(normPressFreq~ group*cue*prepost*ML3 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.affect)
summary(inter.affect)
Confint(inter.affect, level = 0.95)
anova(inter.affect)
summary(inter.affect)
Confint(inter.affect, level = 0.95)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*AFF_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
summary(sslop.pSD)
Confint(sslop.pSD, level = 0.95)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML3, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*AFF_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(sslop.mSD)
summary(sslop.mSD)
Confint(sslop.mSD, level = 0.95)
inter.work = lmer(normPressFreq~ group*cue*prepost*ML1 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.work)
summary(inter.work)
Confint(inter.work, level = 0.95)
inter.social = lmer(normPressFreq~ group*cue*prepost*ML2 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.social)
summary(inter.social)
Confint(inter.social, level = 0.95)
inter.implusivity = lmer(normPressFreq~ group*cue*prepost*ML4 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.implusivity)
summary(inter.implusivity)
Confint(inter.implusivity, level = 0.95)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML3, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*AFF_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
# this tests the model predictions as we do in lmer but does not allow to display distributions
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
acqC1.aov      <- aov_car(normChangeBehav  ~ group*AFF +Error(ID), data = AFF.means, observed = c("AFF"), factorize = F, anova_table = list(es = "pes"))
acqC1.adjmeans <- emmeans(acqC1.aov, specs = c("group"), by = "AFF", at = list(AFF= c(-1, 1)))
acqC1.adjmeans
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
observed = c("AFF"), factorize = F, anova_table = list(correction = "GG",es = "pes"))
#
lowAff.stat
fit <- (aov(normChangeBehav  ~ group + site + Error(ID), data= subset(AFF.means, StressAffect == '1')))
anova_stats(fit$`ID`)
eta_sq(fit, partial = TRUE, ci.lvl = .9)
lowAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
lowAnx.BF <- recompute(lowAnx.BF, iterations = 50000)
lowAnx.BF[1]
highAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '2'),
observed = c("RC1"), factorize = F, anova_table = list(correction = "GG",es = "pes"))
# effect sizes (90%CI)
fit <- (aov(normChangeBehav  ~ group + site + Error(ID), data= subset(AFF.means, StressAffect == '2')))
anova_stats(fit$`ID`)
eta_sq(fit, partial = TRUE, ci.lvl = .9)
highAnx.stat
highAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
highAnx.BF <- recompute(highAnx.BF, iterations = 50000)
highAnx.BF[1]
pp <- ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_point(alpha = .5, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
geom_boxplot(alpha=0.3, outlier.alpha = 0) + # do not display outlyers or they will overlap with individual datapoint
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ppp <- pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
#panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
pdf(file.path(figures_path,'Figure_IndividualDifferences_approach2.pdf'))
print(ppp)
dev.off()
AFF.means$StressAffect    <- dplyr::recode(AFF.means$StressAffect, "1" = "Lower Stress Affect", "2" = "Higher Stress Affect" )
AFF.means$group           <- dplyr::recode(AFF.means$group, "1-day" = "Moderate", "3-day" = "Extensive" )
pp <- ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_point(alpha = .5, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
geom_boxplot(alpha=0.3, outlier.alpha = 0) + # do not display outlyers or they will overlap with individual datapoint
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_point(alpha = .5, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
geom_boxplot(alpha=0.3, outlier.alpha = 0) + # do not display outlyers or they will overlap with individual datapoint
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ppp <- pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
#panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
pdf(file.path(figures_path,'Figure_IndividualDifferences_approach2.pdf'))
print(ppp)
dev.off()
s = factor.scores (Q_ACP.means, quest.1.efa, method= "Bartlett") # is a good alternative but I could not find enough litterature
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_ACP.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
inter.work = lmer(normPressFreq~ group*cue*prepost*ML1 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.work)
inter.social = lmer(normPressFreq~ group*cue*prepost*ML2 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.social)
inter.affect = lmer(normPressFreq~ group*cue*prepost*ML3 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE)
anova(inter.affect)
