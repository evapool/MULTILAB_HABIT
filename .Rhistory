pairs.panels(na.omit(Q_EFA.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with oblimin
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
fa.diagram(quest.1.efa)
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with varimax rotation
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "varimax", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
# save the plot in the figures folder
dev.print(pdf, file.path(figures_path,'Figure_EFA_varimax.pdf'))
dev.off()
s = factor.scores (Q_EFA.means, quest.1.efa)
s
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# run full model for each factor simoutanously
inter.whole = lmer(normPressFreq~ group*cue*prepost*(ML1+ML2+ML3+ML4) + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.whole)
Confint(inter.whole, level = 0.95)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML4, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*AFF_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(sslop.pSD)
Confint(sslop.pSD, level = 0.95)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML4, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*AFF_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(sslop.mSD)
Confint(sslop.mSD, level = 0.95)
summary(inter.whole)
print(quest.1.efa$loadings,cutoff = 0.0)
fa.diagram(quest.1.efa)
summary(inter.whole)
Confint(inter.whole, level = 0.95)
summary(inter.whole)
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
lowAff.stat
F_to_eta2(f = c(3.65), df = c(1), df_error = c(95))
lowAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
lowAnx.BF <- recompute(lowAnx.BF, iterations = 50000)
lowAnx.BF[1]
highAnx.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
#
highAnx.stat
F_to_eta2(f = c(0.41), df = c(1), df_error = c(94))
highAnx.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
highAnx.BF <- recompute(highAnx.BF, iterations = 50000)
highAnx.BF[1]
AFF.means$StressAffect    <- dplyr::recode(AFF.means$StressAffect, "1" = "Lower Stress Affect", "2" = "Higher Stress Affect" )
AFF.means$group           <- dplyr::recode(AFF.means$group, "1-day" = "Moderate", "3-day" = "Extensive" )
pp <- ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .1, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .3, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ppp <- pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
pdf(file.path(figures_path,'Figure_S1_IndividualDifferences.pdf'))
print(ppp)
dev.off()
pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
pp <- ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .3, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ppp <- pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
pdf(file.path(figures_path,'Figure_S1_IndividualDifferences.pdf'))
print(ppp)
dev.off()
pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
ppp <- pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
pdf(file.path(figures_path,'Figure_S1_IndividualDifferences.pdf'))
print(ppp)
dev.off()
CHANGE$ANXIETY_z <- scale(CHANGE$ANXIETY)
inter.anxiety = lmer(normPressFreq~ group*cue*prepost*ANXIETY_z + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.anxiety)
Confint(inter.anxiety, level = 0.95)
CHANGE$ANX_pSD <- scale(CHANGE$ANXIETY_z, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
CHANGE$ANX_mSD <- scale(CHANGE$ANXIETY_z, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
CHANGE$TICS_WORY_z <- scale(CHANGE$TICS_WORY)
CHANGE$WORY_pSD <- scale(CHANGE$TICS_WORY_z, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
CHANGE$WORY_mSD <- scale(CHANGE$TICS_WORY_z, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
ANX.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$ANXIETY), FUN='mean', na.rm = T) # extract means
colnames(ANX.means) <- c('ID','group','site','ANXIETY', 'normChangeBehav')
# create median splits
ANX.means$AnxietySplit <- factor(ntile(ANX.means$ANXIETY, 2))
plyr::count(ANX.means$ID)
WORY.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$TICS_WORY), FUN='mean', na.rm = T) # extract means
colnames(WORY.means) <- c('ID','group','site','TICS_WORY', 'normChangeBehav')
# create median splits
WORY.means$WorriesSplit <- factor(ntile(WORY.means$TICS_WORY, 2))
plyr::count(WORY.means$ID)
ANXWORY.means <- aggregate(CHANGE$normChangeBehav, by = list(CHANGE$ID, CHANGE$group, CHANGE$site, CHANGE$TICS_WORY, CHANGE$ANXIETY), FUN='mean', na.rm = T) # extract means
colnames(ANXWORY.means) <- c('ID','group','site','TICS_WORY','ANXIETY', 'normChangeBehav')
# create median splits
ANXWORY.means$Anxiety <- factor(ntile(ANXWORY.means$ANXIETY, 2))
ANXWORY.means$ChronicWorries <- factor(ntile(ANXWORY.means$TICS_WORY, 2))
MC <- gather(ANXWORY.means, scale, level, Anxiety, ChronicWorries, factor_key=TRUE)
# rename variables for plot
MC$level    <- dplyr::recode(MC$level, "1" = "Lower Level", "2" = "Higher Level" )
MC$group    <- dplyr::recode(MC$group, "1-day" = "Moderate", "3-day" = "Extensive" )
pp <- ggplot(MC, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .3, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .2, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(scale~factor(level,levels=c("Lower Level","Higher Level")))+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ggplot(MC, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .3, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .2, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(scale~factor(level,levels=c("Lower Level","Higher Level")))+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
pp <- ggplot(MC, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .3, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .2, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(scale~factor(level,levels=c("Lower Level","Higher Level")))+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ppp <- pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16))
pdf(file.path(figures_path,'Figure_S2_Anxiety_Worries.pdf'),width=7,height=8)
print(ppp)
dev.off()
pdf(file.path(figures_path,'Figure_S2_Anxiety_Worries.pdf'),width=7,height=8)
print(ppp)
dev.off()
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# run full model for each factor individually
# stress work
inter.work = lmer(normPressFreq~ group*cue*prepost*ML1 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.work)
Confint(inter.work, level = 0.95)
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# quick look at the covarivance structure
r.subscale = cor(Q_EFA.means, use = "pairwise.complete.obs")
cor.plot(Q_EFA.means,numbers=TRUE,main="correlation matrix")
names(Q_EFA.means)[names(Q_EFA.means) == 'V1'] <- 'STAI'
# check distributions before proceeding with FA
describe (Q_EFA.means)
pairs.panels(na.omit(Q_EFA.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with oblimin
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
s = factor.scores (Q_EFA.means, quest.1.efa) #
s
fa.diagram(quest.1.efa)
print(quest.1.efa$loadings,cutoff = 0.0)
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# quick look at the covarivance structure
r.subscale = cor(Q_EFA.means, use = "pairwise.complete.obs")
cor.plot(Q_EFA.means,numbers=TRUE,main="correlation matrix")
names(Q_EFA.means)[names(Q_EFA.means) == 'V1'] <- 'STAI'
# check distributions before proceeding with FA
describe (Q_EFA.means)
pairs.panels(na.omit(Q_EFA.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with oblimin
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
s = factor.scores (Q_EFA.means, quest.1.efa) #
s
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML4, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML4, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
AFF.means$StressAffect    <- dplyr::recode(AFF.means$StressAffect, "1" = "Lower Stress Affect", "2" = "Higher Stress Affect" )
AFF.means$group           <- dplyr::recode(AFF.means$group, "1-day" = "Moderate", "3-day" = "Extensive" )
pp <- ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .3, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .3, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
pp <- ggplot(AFF.means, aes(x = group, y = normChangeBehav, fill = group, color = group)) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(x = group, y = normChangeBehav, fill = factor(group, levels = c("Moderate","Extensive" ))), color = NA)+
geom_point(alpha = .3, position = position_jitterdodge(jitter.width = .5, jitter.height = 0)) +
#stat_summary(fun.data = mean_se, geom = "crossbar",width = 0.85 , alpha = 0.1) +
geom_boxplot(alpha=0,outlier.alpha = 0) +
ylab('Behavioral adaptation index')+
xlab('Amount of Training')+
facet_grid(~StressAffect)+
scale_fill_manual(values=c("#56B4E9", "#0F2080")) +
scale_color_manual(values=c("#56B4E9", "#092C48")) +
theme_bw()
ppp <- pp + theme_bw(base_size = 20, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 18, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
axis.title.x = element_text(size = 22),
axis.title.y = element_text(size = 22))
pdf(file.path(figures_path,'Figure_5_IndividualDifferences.pdf'))
print(ppp)
dev.off()
inter.affect = lmer(normPressFreq~ group*cue*prepost*ML4 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.affect)
Confint(inter.affect, level = 0.95)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML4, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
sslop.pSD = lmer(normPressFreq~ group*cue*prepost*AFF_pSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(sslop.pSD)
Confint(sslop.pSD, level = 0.95)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML4, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
sslop.mSD = lmer(normPressFreq ~ group*cue*prepost*AFF_mSD + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(sslop.mSD)
Confint(sslop.mSD, level = 0.95)
inter.work = lmer(normPressFreq~ group*cue*prepost*ML1 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.work)
Confint(inter.work, level = 0.95)
inter.social = lmer(normPressFreq~ group*cue*prepost*ML3 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.social)
Confint(inter.social, level = 0.95)
inter.implusivity = lmer(normPressFreq~ group*cue*prepost*ML2 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE,control = lmerControl(optimizer ="bobyqa"))
summary(inter.implusivity)
Confint(inter.implusivity, level = 0.95)
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML4, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
s
# Stress affective -1 SD people low on affectiv stress have effect of overtraining
EFA_CHANGE$AFF_pSD <- scale(EFA_CHANGE$ML4, scale = T) + 1 # here I'm going to test at - 1SD (so people that are low in anxiety)
EFA_CHANGE$AFF_mSD <- scale(EFA_CHANGE$ML4, scale = T) - 1 # here I'm going to test at + 1SD (so people that are high in anxiety)
AFF.means <- aggregate(EFA_CHANGE$normChangeBehav, by = list(EFA_CHANGE$ID, EFA_CHANGE$group, EFA_CHANGE$site, EFA_CHANGE$AFF_pSD, EFA_CHANGE$AFF_mSD, EFA_CHANGE$ML3), FUN='mean', na.rm = T) # extract means
colnames(AFF.means) <- c('ID','group','site', 'AFF_pSD', 'AFF_mSD','AFF', 'normChangeBehav')
# figure for AFF: Streess Affect
AFF.means$StressAffect<- ntile(AFF.means$AFF, 2)
AFF.means$StressAffect<- factor(AFF.means$StressAffect)
#
lowAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '1'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
#
lowAff.stat
F_to_eta2(f = c(4.38), df = c(1), df_error = c(95))
lowAff.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means, StressAffect  == '1'),
whichRandom = "ID", iterations = 50000)
lowAff.BF <- recompute(lowAnx.BF, iterations = 50000)
lowAff.BF[1]
highAff.stat    <- aov_car(normChangeBehav  ~ group + site + Error(ID), data = subset(AFF.means, StressAffect == '2'),
factorize = F, anova_table = list(correction = "GG",es = "pes"))
#
highAff.stat
F_to_eta2(f = c(0.13), df = c(1), df_error = c(94))
highAff.BF <- anovaBF(normChangeBehav  ~ group + site, data = subset(AFF.means,  StressAffect == '2'),
whichRandom = "ID", iterations = 50000)
highAff.BF <- recompute(highAff.BF, iterations = 50000)
highAff.BF[1]
inter.affect = lmer(normPressFreq~ (group+cue+prepost+ML4)^4 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
inter.null = lmer(normPressFreq~ (group+cue+prepost+ML4)^3 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.affect)
summary(inter.null)
anova(inter.affect,inter.null)
BIC(inter.null)
BF_BIC = exp((BIC(inter.null) - BIC(inter.affect))/2)
BF_BIC
BIC(inter.affect)
full_BF = lmBF(normPressFreq~ (group+cue+prepost+ML4)^4 + itemxcondition + site + id, data = EFA_CHANGE, whichRandom = 'ID')
null_BF = lmBF(normPressFreq~ (group+cue+prepost+ML4)^3 + itemxcondition + site + id, data = EFA_CHANGE, whichRandom = 'ID')
full_BF = lmBF(normPressFreq ~ (group+cue+prepost+ML4)^4 + itemxcondition + site + ID, data = EFA_CHANGE, whichRandom = 'ID')
full_BF = lmBF(normPressFreq ~ (group+cue+prepost+ML4)^4 + itemxcondition + site + ID, data = na.omit(EFA_CHANGE), whichRandom = 'ID')
EFA_CHANGE$ID
EFA_CHANGE$itemxcondition
FULL$itemxcondition <- factor(FULL$itemxcondition)
FULL$itemxcondition
CHANGE$itemxcondition
CHANGE$countTrialxCondition <- factor (CHANGE$countTrialxCondition)
CHANGE$countTrialxCondition
library(car)
library(afex)
library(doBy)
library(lme4)
library(lmerTest)
library(ggplot2)
library(BayesFactor)
library(sjstats)
library(jtools)
library(plyr)
library(dplyr)
library(tidyr)
library(metafor)
library(rmcorr)
library(flexmix)
library(psych)
library(emmeans)
library(devtools)
library(effectsize)
#---------------------------------------------------------------------------
#                    PRELIMINARY STUFF
#---------------------------------------------------------------------------
# Set path
full_path       <- dirname(rstudioapi::getActiveDocumentContext()$path)
pos             <- regexpr("MULTILAB_HABIT", full_path)
home_path       <- substr(full_path, 1, pos+13)
figures_path    <- file.path(home_path,'ANALYSIS', 'figures')
utilities_path  <- file.path(home_path,'ANALYSIS','R')
setwd (home_path)
# source my utilites
source (file.path(utilities_path, 'getChangeIndex.R'))
source (file.path(utilities_path, 'getClassicIndex.R'))
source (file.path(utilities_path, 'makeIndividualDiffPlot.R'))
source (file.path(utilities_path, 'makeSplitGroupPlot.R'))
source (file.path(utilities_path, 'countTrialxCondition.R'))
# get tool
devtools::source_gist("2a1bb0133ff568cbe28d",
filename = "geom_flat_violin.R")
# get database
FULL <- read.delim(file.path(home_path,'DATA/FULL_DATABASE.txt'), header = T, sep ='') # read in dataset
# define factors
FULL$site      <- factor(FULL$site)
FULL$ID        <- factor(FULL$ID)
FULL$session   <- factor(FULL$session)
FULL$run       <- factor(FULL$run)
FULL$trial     <- factor(FULL$trial)
FULL$cue       <- factor(FULL$cue)
FULL$prepost   <- factor(FULL$prepost)
FULL$group     <- factor(FULL$group)
# remove the baseline condition from the data
FULL <- subset(FULL, cue == 'Valued' | cue == 'Devalued')
# get the last run of the last training session and all the runs after satiation
DAY1   <- subset(FULL, group == '1-day')
DAY3   <- subset(FULL, group == '3-day')
DAY1 <- ddply(DAY1, .(ID), transform, averagePress  = mean(pressFreq[prepost=="pre"]))
DAY3 <- ddply(DAY3, .(ID), transform, averagePress  = mean(pressFreq[prepost=="pre"]))
C.DAY1 <- subset(DAY1, run == '2' | run == '3')
DAY3   <- subset(DAY3, session == '3') # we want the last day only
C.DAY3 <- subset(DAY3, run == '4' | run == '5')
CHANGE <- rbind(C.DAY1,C.DAY3)
# get variable of interest
CHANGE <- ddply(CHANGE, .(ID), transform, normChangeBehav  = (mean(normPressFreq[prepost=="post" & cue=='Valued']) - mean(normPressFreq[prepost=="pre" & cue=='Valued'])) - (mean(normPressFreq[prepost=="post" & cue=='Devalued']) - mean(normPressFreq[prepost=="pre" & cue=='Devalued'])))
CHANGE <- ddply(CHANGE, .(ID), transform, normChangeLiking = (mean(normLiking[prepost=="post" & cue=='Valued']) - mean(normLiking[prepost=="pre" & cue=='Valued'])) - (mean(normLiking[prepost=="post" & cue=='Devalued']) - mean(normLiking[prepost=="pre" & cue=='Devalued'])))
# code itemxcondition
CHANGE <- ddply(CHANGE, .(ID,prepost), countTrialxCondition)
# get total number of participants included
plyr::count(CHANGE$ID) # note that Caltech2 used a slightly different protocol so there are less repeat per condition
CHANGE$countTrialxCondition <- factor(CHANGE$countTrialxCondition)
# subset by site
C.CALTECH = subset(CHANGE, site == 'Caltech1')
C.CALTECH2= subset(CHANGE, site == 'Caltech2')
C.HAMBURG = subset(CHANGE, site == 'Hamburg')
C.SYDNEY  = subset(CHANGE, site == 'Sydney')
C.TELAVIV = subset(CHANGE, site == 'Tel_Aviv')
# prepare database for the FA
Q_EFA.means.ID <- aggregate(ANXIETY ~ ID * TICS_SOOV * TICS_PREPE * TICS_WODI * TICS_EXWO * TICS_LACK * TICS_SOTE * TICS_SOIS * TICS_WORY * TICS_WOOV * BIS_motor * BIS_attentional * BIS_nonplanning,
data = CHANGE, FUN = mean, na.action = na.pass) # we do not include the total scales
Q_EFA.means <- Q_EFA.means.ID
Q_EFA.means$ID <- NULL
# quick look at the covarivance structure
r.subscale = cor(Q_EFA.means, use = "pairwise.complete.obs")
cor.plot(Q_EFA.means,numbers=TRUE,main="correlation matrix")
names(Q_EFA.means)[names(Q_EFA.means) == 'V1'] <- 'STAI'
# check distributions before proceeding with FA
describe (Q_EFA.means)
pairs.panels(na.omit(Q_EFA.means))
# determine the number of factors
nFactor  <- fa.parallel(Q_EFA.means, fm = "ml")
# apply EFA with oblimin
quest.1.efa <- fa(r = Q_EFA.means, nfactors = 4, rotate = "oblimin", fm = "ml")
print(quest.1.efa$loadings,cutoff = 0.0)
# create figure with EFA solution
fa.diagram(quest.1.efa)
# save the plot in the figures folder
dev.print(pdf, file.path(figures_path,'Figure_EFA_oblimin.pdf'))
dev.off()
# calculate the factors loadings
s = factor.scores (Q_EFA.means, quest.1.efa) #
s
# merge with the FULL database
axes <- s$scores
# combine it with the participants ID
dat <- cbind(Q_EFA.means.ID, axes)
EFA_CHANGE <- join (CHANGE,dat, type = "full")
# run full mode
# stress affect
inter.affect = lmer(normPressFreq~ group*cue*prepost*ML4 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
summary(inter.affect)
inter.affect = lmer(normPressFreq~ (group+cue+prepost+ML4)^4 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
inter.null = lmer(normPressFreq~ (group+cue+prepost+ML4)^3 + itemxcondition + site + (1+cue*prepost+itemxcondition|ID), data = EFA_CHANGE, REML=FALSE, control = lmerControl(optimizer ="bobyqa"))
full_BF = lmBF(normPressFreq ~ (group+cue+prepost+ML4)^4 + itemxcondition + site + ID, data = na.omit(EFA_CHANGE), whichRandom = 'ID')
BF_BIC = exp((BIC(inter.null) - BIC(inter.affect))/2)
BF_BIC
EFA_CHANGE$site
EFA_CHANGE$ID
EFA_CHANGE$itemxcondition
full_BF = lmBF(normPressFreq ~ (group+cue+prepost+ML4)^4 + site + ID, data = na.omit(EFA_CHANGE), whichRandom = 'ID')
full_BF = lmBF(normPressFreq ~ (group+cue+prepost+ML4)^4 +  ID, data = na.omit(EFA_CHANGE), whichRandom = 'ID')
